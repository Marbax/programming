--------------------------------------------------------------------------------------------
---Задание 1. Создайте базу данных для барбершопа. Необходимо хранить следующую информацию: 
--------------------------------------------------------------------------------------------

use [master];
go

if db_id('Barber_Shop_DB') is not null
begin
	drop database [Barber_Shop_DB];
end
go

create database [Barber_Shop_DB];
go

use [Barber_Shop_DB];
go
----------------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------------------
---    ■ Данные барберов: 
---        ▷ФИО 
---        ▷пол 
---        ▷контактный телефон 
---        ▷email 
---        ▷дата рождения 
---        ▷дата приёма на работу 
---        ▷позиция в барбершопе: чиф-барбер (только один), синьор-барбер, джуниор-барбер 
---        ▷список услуг с ценами и длительностью услуги по времени 
---        ▷фидбеки клиентов о барбере 
---        ▷оценки барберов от клиентов (очень плохо, плохо, нормально, хорошо, великолепно).

create table [Persons]
(
    [Persons_Id] int not null identity(1, 1) constraint pk_PersonsId primary key,
	[Name] nvarchar(100) not null check ([Name] <> N''),
	[Surname] nvarchar(100) not null check ([Surname] <> N''),
	[MiddleName] nvarchar(100) not null check ([MiddleName] <> N'')
);
go

create table [Genders]
(
    [Genders_Id] int not null identity(1, 1) constraint pk_GendersId primary key,
	[Name] nvarchar(100) not null unique check ([Name] <> N'')
);
go

create table [Positions]
(
    [Positions_Id] int not null identity(1, 1) constraint pk_PositionsId primary key,
	[Name] nvarchar(100) not null unique check ([Name] <> N'')
);
go

create table [Services]
(
    [Services_Id] int not null identity(1, 1) constraint pk_ServicesId primary key,
	[Name] nvarchar(100) not null unique check ([Name] <> N''),
	[Value] money not null check (Value > 0),
	[Durability] float not null check (Durability>0)
);
go



create table [Barbers]
(
    [Barbers_Id] int not null identity(1, 1) constraint pk_BarbersId primary key,
	[Persons_Id] int not null,
	[Genders_Id] int not null,
    [PhoneNum] varchar(22) not null unique check ([PhoneNum] <> N''),
    [Email] varchar(255) not null unique check ([Email] <> N''),
	[BirthDate] date not null,
    [EmployDate] date not null,
    [Positions_Id] int default 0
);
go

create table [Services_Barbers]
(
    [Services_Id] int not null,
    [Barbers_Id] int not null 
);
go

alter table [Services_Barbers]
add constraint fk_Services_Barbers_to_ServicesId
foreign key ([Services_Id]) references [Services]([Services_Id])
on update no action on delete no action;
go
alter table [Services_Barbers]
add constraint fk_Services_Barbers_to_BarbersId
foreign key ([Barbers_Id]) references [Barbers]([Barbers_Id])
on update no action on delete no action;
go
alter table [Services_Barbers]
add constraint pf_Services_Barbers_Ids
primary key  (Services_Id , Barbers_Id);
go


alter table [Barbers]
add constraint fk_Barbers_to_PersonsId
foreign key ([Persons_Id]) references [Persons]([Persons_Id])
on update no action on delete no action;
go
alter table [Barbers]
add constraint fk_Barbers_to_GendersId
foreign key ([Genders_Id]) references [Genders]([Genders_Id])
on update no action on delete no action;
go
alter table [Barbers]
add constraint fk_Barbers_to_PositionsId
foreign key ([Positions_Id]) references [Positions]([Positions_Id])
on update no action on delete no action;
go
----------------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------------------
---    ■ Данные клиентов 
---        ▷ФИО 
---        ▷контактный телефон 
---        ▷email 
---        ▷фидбеки клиента о барберах 
---        ▷оценки клиентов барберам (очень плохо, плохо, нормально, хорошо, великолепно). 
create table [Marks]
(
    [Marks_Id] int not null identity(1, 1) constraint pk_MarksId primary key,
	[Name] nvarchar(255) not null unique check ([Name] <> N'')
);
go



create table [Customers]
(
    [Customers_Id] int not null identity(1, 1) constraint pk_CustomersId primary key,
	[Persons_Id] int not null,
    [PhoneNum] varchar(22) not null unique check ([PhoneNum] <> N''),
    [Email] varchar(255) not null unique check ([Email] <> N''),
);
go

alter table [Customers]
add constraint fk_Customers_to_PersonsId
foreign key ([Persons_Id]) references [Persons]([Persons_Id])
on update no action on delete no action;
go



create table [Reviews]
(
    [Barbers_Id] int not null,
    [Customers_Id] int not null,
	[Text] nvarchar(255) not null check ([Text] <> N'')
);
go

alter table [Reviews]
add constraint fk_Reviews_to_BarbersId
foreign key ([Barbers_Id]) references [Barbers]([Barbers_Id])
on update no action on delete no action;
go
alter table [Reviews]
add constraint fk_Reviews_to_CustomersId
foreign key ([Customers_Id]) references [Customers]([Customers_Id])
on update no action on delete no action;
go
alter table [Reviews]
add constraint pf_Reviews_to_Customers_Ids
primary key  (Barbers_Id , Customers_Id);
go



create table [Marks_Barbers_Customers]
(
    [Barbers_Id] int not null,
    [Customers_Id] int not null,
	[Marks_Id] int not null
);
go

alter table [Marks_Barbers_Customers]
add constraint fk_Marks_Barbers_Customers_to_BarbersId
foreign key ([Barbers_Id]) references [Barbers]([Barbers_Id])
on update no action on delete no action;
go
alter table [Marks_Barbers_Customers]
add constraint fk_Marks_Barbers_Customers_to_CustomersId
foreign key ([Customers_Id]) references [Customers]([Customers_Id])
on update no action on delete no action;
go
alter table [Marks_Barbers_Customers]
add constraint fk_Marks_Barbers_Customers_to_MarksId
foreign key ([Marks_Id]) references [Marks]([Marks_Id])
on update no action on delete no action;
go
alter table [Marks_Barbers_Customers]
add constraint pf_Barbers_Customers_Ids
primary key  (Barbers_Id , Customers_Id);
go
----------------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------------------
---    ■ Расписание барберов 
---        ▷доступность по датам и времени 
---        ▷запись на дату и время конкретного клиента. 
create table [SessionsSlots]
(
    [SessionsSlots_Id] int not null identity(1, 1) constraint pk_SessionsSlotsId primary key,
    [Time] time not null
    );
go


create table [Barbers_Schedules]
(
    [Barbers_Schedules_Id] int not null identity(1, 1) constraint pk_Barbers_SchedulesId primary key,
    [Barbers_Id] int not null,
    [Customers_Id] int not null,
    [SessionDate] datetime not null,
    [SessionsSlots_Id] int not null
    );
go

alter table [Barbers_Schedules]
add constraint fk_Barbers_Schedules_to_BarbersId
foreign key ([Barbers_Id]) references [Barbers]([Barbers_Id])
on update no action on delete no action;
go
alter table [Barbers_Schedules]
add constraint fk_Barbers_Schedules_to_CustomersId
foreign key ([Customers_Id]) references [Customers]([Customers_Id])
on update no action on delete no action;
go
alter table [Barbers_Schedules]
add constraint fk_Barbers_Schedules_to_SessionsSlotsId
foreign key ([SessionsSlots_Id]) references [SessionsSlots]([SessionsSlots_Id])
on update no action on delete no action;
go
----------------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------------------
---    ■ Архив посещений клиентов 
---        ▷Клиент 
---        ▷Барбер 
---        ▷Услуга (и) 
---        ▷Дата 
---        ▷Общая стоимость 
---        ▷Оценка (can be null)
---        ▷фидбек. (can be null)

create table [Visits_Arch]
(
    [Visits_Arch_Id] int not null identity(1, 1) constraint pk_Visits_ArchId primary key,
    [Barbers_Id] int not null,
    [Customers_Id] int not null,
    [SessionDate] datetime not null,
    [Visit's_Value] money not null check ([Visit's_Value]>0)    
);
go

alter table [Visits_Arch]
add constraint fk_Visits_Arch_to_BarbersId
foreign key ([Barbers_Id]) references [Barbers]([Barbers_Id])
on update no action on delete no action;
go
alter table [Visits_Arch]
add constraint fk_Visits_Arch_to_CustomersId
foreign key ([Customers_Id]) references [Customers]([Customers_Id])
on update no action on delete no action;
go


create table [Visits_Services]
(
    [Services_Id] int not null,
    [Visits_Arch_Id] int not null 
);
go

alter table [Visits_Services]
add constraint fk_Visits_Services_to_ServicesId
foreign key ([Services_Id]) references [Services]([Services_Id])
on update no action on delete no action;
go
alter table [Visits_Services]
add constraint fk_Visits_Services_to_BarbersId
foreign key ([Visits_Arch_Id]) references [Visits_Arch]([Visits_Arch_Id])
on update no action on delete no action;
go
alter table [Visits_Services]
add constraint pf_Visits_Services_Ids
primary key  (Services_Id , Visits_Arch_Id);
go


----------------------------------------------------------------------------------------------------------------------------------------------
