#include <iostream>
#include <time.h>
using namespace std;

// 1. Написать функцию удаления элемента из одномерного динамического массива по
// заданной позиции. Предусмотреть возможность выхода указанной позиции за
// пределы массива(не удалять элемент, а выдавать сообщение об ошибке).

void Fill_array(int *arr, int size, int max, int min)
{
    srand(time(0));
    for (int i = 0; i < size; i++)
    {
        arr[i] = rand() % (max - min) + min;
    }
}

void Print_array(int *arr, int size)
{
    for (int i = 0; i < size; i++)
    {
        cout << arr[i] << " ";
    }
    cout << endl;
}

void Ellement_removing(int *&arr, int &size, int &elem)
{
    //system("clear");
    if (elem < size)
    {
        size--;
        int *tmp = new int[size]; // 1

        for (int i = 0, j = 0; i < size; j++, i++) // 2
        {
            if (j == elem)
            {
                j++;
            }

            tmp[i] = arr[j];
        }
        delete[] arr; // 3

        arr = tmp; // 4
        Print_array(arr, size);
    }
    else
        cout << "Wrong number!";
}

int main()
{
    int size = 10, m = 0, n = 0;
    int max = 10, min = 0;
    int elem = 0;
    int *arr = new int[size];
    Fill_array(arr, size, max, min);
    Print_array(arr, size);
    cout << "Enter a number(index) of element which you want to remove ==> ";
    cin >> elem;
    Ellement_removing(arr, size, elem);

    delete[] arr;
}

//-----------------------------------------------------------------------------------------------------------------------------------------------------------

#include <iostream>
#include <time.h>
#include <iomanip> //форматирование вывода
using namespace std;

// 2. Написать программу, в которой создается двумерный динамический массив.
// Количество строк и столбцов задает пользователь. Массив заполняется
// случайными числами в диапазоне [3,12].
// Задание:
// a. Поменять местами четные и нечетные строки;
// b. Поменять местами четные и нечетные столбцы.

void Fill_array(int **arr, int max, int min, int row, int col)
{
    srand(time(0));
    for (int i = 0; i < row; i++)
    {
        for (int j = 0; j < col; j++)
        {
            arr[i][j] = rand() % (max - min) + min;
        }
    }
}

void Print_array(int **arr, int row, int col)
{
    for (int i = 0; i < row; i++)
    {
        for (int j = 0; j < col; j++)
        {
            cout << setw(3) << arr[i][j] << " ";
        }
        cout << endl;
    }
}

void Collums_replace(int **arr, int row, int col)
{
    for (int i = 0; i < row; i++)
    {
        for (int j = 0; j < col; j++)
        {
            if (j % 2 == 0 && j < col - 1)
            {
                swap(arr[i][j], arr[i][j + 1]);
            }
        }
    }
}

void Rows_replace(int **arr, int row, int col)
{
    for (int i = 0; i < row; i++)
    {
        for (int j = 0; j < col; j++)
        {
            if (i % 2 == 0 && i < row - 1)
            {
                swap(arr[i][j], arr[i + 1][j]);
            }
        }
    }
}

int main()
{
    int row = 0, col = 0;
    int max = 12, min = 3;
    char key;
    cout << "Enter number of rows ==> ";
    cin >> row;
    cout << "\nAnd numuber of collums ==> ";
    cin >> col;
    system("clear");
    int **arr = new int *[row];
    for (int i = 0; i < row; i++)
    {
        arr[i] = new int[col];
    }
    Fill_array(arr, max, min, row, col);
    while (true)
    {
        Print_array(arr, row, col);
        cout << "\na) replace even rows with not even\n";
        cout << "b) replace even collums with not even\nESC - выход\n";
        cin >> key;
        switch (key)
        {
        case 98:
            Collums_replace(arr, row, col);
            break;
        case 97:
            Rows_replace(arr, row, col);
            break;
        case 27:
            system("clear");
            cout << "Good bye\n";
            return 0;
            break;
        }
    }
    for (int i = 0; i < row; i++)
    {
        delete[] arr[i];
    }
    delete[] arr;
}

//-----------------------------------------------------------------------------------------------------------------------------------------------------------

#include <iostream>
#include <time.h>
#include <iomanip>
using namespace std;

// 3. Написать программу, в которой создается двумерный динамический массив.
// Количество строк задает пользователь. Количество столбцов генерируется
// случайным образом(для каждой строки) в диапазоне от 5 до 10 элементов.
// Заполнить массив случайными числами в диапазоне [0,100] и вывести его на
// экран. Найти номер строки, сумма элементов которой является максимальной.

void Fill_array(int **arr, int max, int min, int row, int *col)
{
    srand(time(0));
    for (int i = 0; i < row; i++)
    {
        for (int j = 0; j < col[i]; j++)
        {
            arr[i][j] = rand() % (max - min) + min;
        }
    }
}

void Print_array(int **arr, int row, int *col)
{
    for (int i = 0; i < row; i++)
    {
        for (int j = 0; j < col[i]; j++)
        {
            cout << setw(3) << arr[i][j] << " ";
        }
        cout << endl;
    }
}

int Counter_of_max(int **arr, int row, int *col)
{
    int counter = 0, index = 0;
    for (int i = 0; i < row; i++)
    {
        int old_counter = 0;
        for (int j = 0; j < col[i]; j++)
        {
            old_counter += arr[i][j];
        }
        if (old_counter > counter)
        {
            counter = old_counter;
            index = i;
        }
    }
    return index;
}

int main()
{
    int row = 0, max_col = 10, min_col = 5;
    int max = 100, min = 0;
    int b_line = 0;
    int *col = new int[row];
    char key;
    cout << "Enter number of rows ==> ";
    cin >> row;
    system("clear");
    int **arr = new int *[row];
    for (int i = 0; i < row; i++)
    {
        col[i] = rand() % (max_col - min_col) + min_col;
        arr[i] = new int[col[i]];
    }
    Fill_array(arr, max, min, row, col);
    Print_array(arr, row, col);

    b_line = Counter_of_max(arr, row, col);
    cout << "\nNumber of the line with biggest sum of ellements is : " << b_line;
    for (int i = 0; i < row; i++)
    {
        delete[] arr[i];
    }
    delete[] arr;
}
