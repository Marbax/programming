#include <iostream>
#include <math.h>
using namespace std;
//----------------------------FUNCTIONS-----------------------------------------------
// фнкция это конструкция языка программирования ,которая позволяет вынести за пределеы основной программы
// участок кода(который может повторяться). Данный участок кода получает сосбственное имя ,через которое может быть вызван
// в теле основной программы .
// Два оганичения : 1) функцию нельзя обьявлять,описать внутри другой функции  2) нельзя вызывать функцию до ее обьявления
//
// тип_возвращ имя (параметры)
// {тело фунции ;}
//
//------------------------------------------------------------------------------------
/* 
void Hello(int n)
{
    for (int i = 0; i < n; i++)
    {
        cout << "Hello World!" << endl;
    }
}

int main()
{
    int x = 0;
    cout <<"---> ";
    cin >> x;
    cout << endl;
    Hello(x);
}
 */
//------------------------------------------------------------------------------------

//------------------------------------------------------------------------------------
//для возвращения данных(сохранения)
/* 
int Sum(int a, int b)
{
    return a + b;
}

int main()
{
    cout << Sum(12, Sum(2, 8)) * 10;
}
 */
//------------------------------------------------------------------------------------

//------------------------------------------------------------------------------------
// Глобальная переменная - описаная за пределами мейна , и работает только на то ,что под ней (в ней не бывает мусора ,только ноль)
// обратится к глобальной напрямую ::x (глобальные лучше(!!!) не использовать)
/* 
int x = 69;

int main()
{
    int x = 0;
    cout << ::x;
}
 */
//------------------------------------------------------------------------------------

//------------------------------------------------------------------------------------
// вывод массива
/* 
void print_array(int arr[], int size)
{
    for (int i = 0; i < size; i++)
    {
        cout << arr[i] << " ";
    }
}

int main()
{
    const int size = 5;
    int arr[size]{12, 23, 34, 45, 67};
    print_array(arr, size);
    print_array(arr, size + 2);
}
 */
//------------------------------------------------------------------------------------

//------------------------------------------------------------------------------------
// заполнение массива (массивы не копируются ,даются ссылки на индексы)
/* 
void print_array(int arr[], int size)
{
    for (int i = 0; i < size; i++)
    {
        cout << arr[i] << " ";
    }
}

void fill_array(int arr[], int size) // заполнение массива
{
    for (int i = 0; i < size; i++)
    {
        arr[i] = rand() % 10;
    }
}

int main()
{
    const int size = 5;
    int arr[size]{};
    fill_array(arr, size);
    print_array(arr, size);
}
 */
//------------------------------------------------------------------------------------

//------------------------------------------------------------------------------------
// написать функцию ,которая принимает кол-во чисел и выводит кол-во четных
/* 
void fill_array(int arr[], int size) // заполнение массива
{
    for (int i = 0; i < size; i++)
    {
        arr[i] = rand() % 10;
    }
}

int event_counter(int arr[], int size)
{
    int n = 0;
    for (int i = 0; i < size; i++)
    {
        if (arr[i] % 2 == 0)
        {
            n++;
        }
        
    }
    return n;
}
int main()
{
    const int size = 5;
    int arr[size]{};
    fill_array(arr, size);
    cout << " event_counter " << event_counter(arr, size);
}
 */
//------------------------------------------------------------------------------------

//------------------------------------------------------------------------------------
// принимает число и говорит четное оно или нет
/* 
bool is_even(int val)
{
    return (val % 2 == 0);
}
 */
//------------------------------------------------------------------------------------

//------------------------------------------------------------------------------------
// принимает число и говорит четное оно или нет
/* 
bool is_even(int val)
{
    return (val % 2 == 0);
}
int event_counter(int arr[], int size)
{
    int n = 0;
    for (int i = 0; i < size; i++)
    {
        if (is_even(arr[i]))
        {
            n++;
        }
    }
    return n;
}
int main()
{
    const int size = 5;
    int arr[size]{};
    cout << " event_counter " << event_counter(arr, size);
}
 */
//------------------------------------------------------------------------------------

//------------------------------------------------------------------------------------
//прототип функции (обьявляется первой строчкой в начале самом ,оканчивается точкой с запятой)
/* 
int event_counter(int arr[], int size);
bool is_even(int val);

int main()
{
}
 */
//------------------------------------------------------------------------------------

//------------------------------------------------------------------------------------
// Написать функцию , которая будет заполнять массив простыми числами (делятся только на себя и 1)
/* 
void fill_array_with_prime_numbers(int arr[], int size)
{
    for (int i = 0, j = 2; i < size; j++)
    {
        bool f = true;
        for (int k = 2; k <= sqrt(j); ++k)
        {
            if (j % k == 0)
            {
                f = false;
                break;
            }
        }
        if (f)
            arr[i++] = j;
    }
}
 */
//------------------------------------------------------------------------------------

//------------------------------------------------------------------------------------
// Написать функцию , которая будет заполнять массив простыми числами (делятся только на себя и 1)
// не доделаный
/* 
bool is_prime(int val)
{
    val = abs(val);
    if (val < 2)
    {
        return false;
    }

    for (int i = 2; i <= sqrt(val); ++i)
    {
        if (val % i == 0)

            return false;
    }
    return true;
}
void fill_array_with_prime_numbers(int arr[], int size)
{
    for (int i = 0, j = 2; i < size; j++)
    {
        if (is_prime(arr[j]))
        {
            arr[i++] = j;
        }
    }
}

int main()
{
    const int size = 5;
    int arr[size]{};
    cout << " event_counter " << is_prime(arr, size);
}
 */
//------------------------------------------------------------------------------------

//------------------------------------------------------------------------------------
//  параметры по умолчани
/* 
int Hello(int n=1) // вот 
{
    cout << " hEllo world!"<<endl;
}

int main ()
{
    Hello();
}
 */
//------------------------------------------------------------------------------------

//------------------------------------------------------------------------------------
//  параметры по умолчани . Значения по умолчанию должны быть назначены ТОЛЬКО в проттотипе (если прототип есть)
/* 
int Sum(int a = 0, int b = 0, int c = 0, int d = 0) //дэфолтные значения должны НЕПРЕРЫВНО присваиваться с права
{
    return a + b + c + d;
}

int main()
{
    cout << " Sum  " << Sum(2,3);
}
 */
//------------------------------------------------------------------------------------

//------------------------------------------------------------------------------------
//РЕКУРСИЯ - функция вызывает себя же непосредственно или косвенно
// ГЛАВНОЕ сначала придумать КОГДА рекусрия заканчивается
/* 
int factorial_i(int val)
{
    int f = 1;
    while (val)
    {
        f *= val--;
    }
    return f;
}
int main()
{
    cout << factorial_i(5);
}
 */
//------------------------------------------------------------------------------------

//------------------------------------------------------------------------------------
//РЕКУРСИЯ - функция вызывает себя же непосредственно или
// ГЛАВНОЕ сначала придумать КОГДА рекусрия заканчивается
/* 
int factorial_r(int val)
{
    if (val < 2)
        return 1;
    return val * factorial_r(val - 1);
}

int main()
{
    cout << factorial_r(5);
}
 */
//------------------------------------------------------------------------------------

//------------------------------------------------------------------------------------
// кол-во чисел числа
// ГЛАВНОЕ сначала придумать КОГДА рекусрия заканчивается
/* 
int recursive_num_ammount(int val)
{
    if (val < 10)
        return 1;
    return 1 + recursive_num_ammount(val / 10);
}

int main()
{
    cout << recursive_num_ammount(5124101111);
}
 */
//------------------------------------------------------------------------------------

//------------------------------------------------------------------------------------
// сумма чисел числа
// ГЛАВНОЕ сначала придумать КОГДА рекусрия заканчивается
/* 
int recursive_num_ammount(int val)
{
    if (val < 10)
        return val;
    return val % 10 + recursive_num_ammount(val / 10);
}

int main()
{
    cout << recursive_num_ammount(5124);
}
 */
//------------------------------------------------------------------------------------

//------------------------------------------------------------------------------------
//переворачивать число
// ГЛАВНОЕ сначала придумать КОГДА рекусрия заканчивается

void recursive_num_reverse(int val)
{
    if (val != 0)
    {
        cout << val % 10 << " ";
        recursive_num_reverse(val / 10);
    }
}

int main()
{
    recursive_num_reverse(5124);
}

//------------------------------------------------------------------------------------
